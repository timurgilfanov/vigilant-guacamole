name: Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    permissions:
      contents: read

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: ${{ github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event.pull_request.head.sha || github.sha }}
        extra_args: --results=verified,unknown

    - name: Decode google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > app/google-services.json

    - name: Decode keystore
      run: echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

    - name: Generate local.properties for signing
      run: |
        echo "KEYSTORE_FILE=keystore.jks" >> local.properties
        echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> local.properties
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> local.properties
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> local.properties

    - name: set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run Android Lint
      run: ./gradlew lintDebug

    - name: Upload Lint Report
      uses: actions/upload-artifact@v4
      with:
        name: lint-report
        path: app/build/reports/lint-results-debug.html

    - name: Run Detekt
      run: |
        ./gradlew detekt | tee detekt.log
        EXIT=${PIPESTATUS[0]}
        [ $EXIT -eq 0 ] || cat detekt.log
        exit $EXIT

    - name: Upload Detekt Log
      uses: actions/upload-artifact@v4
      with:
        name: detekt-log
        path: detekt.log

    - name: Upload Detekt Report
      uses: actions/upload-artifact@v4
      with:
        name: detekt-report
        path: app/build/reports/detekt/detekt.html

    - name: Build Debug APK
      run: ./gradlew -Pcoverage assembleDebug

    - name: Build AndroidTest APK
      run: ./gradlew -Pcoverage assembleDebugAndroidTest

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Upload AndroidTest APK
      uses: actions/upload-artifact@v4
      with:
        name: androidtest-apk
        path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  test:
    needs: build

    permissions:
      checks: write # required for mikepenz/action-junit-report
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Decode google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > app/google-services.json

    - name: Decode keystore
      run: echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

    - name: Generate local.properties for signing
      run: |
        echo "KEYSTORE_FILE=keystore.jks" >> local.properties
        echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> local.properties
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> local.properties
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> local.properties

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug

    - name: Download AndroidTest APK
      uses: actions/download-artifact@v4
      with:
        name: androidtest-apk
        path: app/build/outputs/apk/androidTest/debug

    - name: Run Unit Tests
      run: |
        ./gradlew testDebugUnitTest | tee unit-test.log
        EXIT=${PIPESTATUS[0]}
        [ $EXIT -eq 0 ] || cat unit-test.log
        exit $EXIT

    - name: Upload Unit Test Report
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-report
        path: app/build/reports/tests/testDebugUnitTest

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Install gcloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Run Firebase Test Lab tests
      run: |
        gcloud firebase test android run \
          --type instrumentation \
          --app app/build/outputs/apk/debug/app-debug.apk \
          --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
          --device model=MediumPhone.arm,version=30 \
          --timeout 5m \
          --environment-variables coverage=true,coverageFile=/sdcard/Download/coverage.ec \
          --directories-to-pull /sdcard/Download \
          --results-dir="instrumentation-test-results-${{ github.run_id }}-${{ github.run_attempt }}" \
          --results-bucket=gs://instrumentation-test-results

    - name: Download results from Firebase Test Lab
      run: |
        mkdir -p testlab-results
        gsutil -m cp -r gs://instrumentation-test-results/instrumentation-test-results-${{ github.run_id }}-${{ github.run_attempt }} testlab-results/

    - name: List Firebase Results Files
      run: |
        ls testlab-results
        find testlab-results -type f

    - name: Download JaCoCo CLI
      run: |
        curl -L -o jacococli.jar https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.11/org.jacoco.cli-0.8.11-nodeps.jar

    - name: Convert .ec to JaCoCo XML
      run: |
        mkdir -p coverage-report
        java -jar jacococli.jar report testlab-results/instrumentation-test-results-${{ github.run_id }}-${{ github.run_attempt }}/artifacts/sdcard/Download/coverage.ec \
          --classfiles app/build/intermediates/javac/debug/classes \
          --classfiles app/build/tmp/kotlin-classes/debug \
          --sourcefiles app/src/main \
          --xml coverage-report/instrumented-report.xml

    - name: Upload Instrumented Test Report
      uses: actions/upload-artifact@v4
      with:
        name: firebase-testlab-results
        path: testlab-results

    - name: Publish Unit Test Results
      uses: mikepenz/action-junit-report@v4
      with:
        report_paths: app/build/test-results/testDebugUnitTest/*.xml
        check_name: "Unit Test Results"

    - name: Publish Instrumented Test Results
      uses: mikepenz/action-junit-report@v4
      with:
        report_paths: testlab-results/instrumentation-test-results-${{ github.run_id }}-${{ github.run_attempt }}/**/*.xml
        check_name: "Instrumented Test Results"

    - name: Generate Kover XML Report
      run: ./gradlew koverXmlReport

    - name: Upload Kover Unit XML Report
      uses: actions/upload-artifact@v4
      with:
        name: unit-report
        path: app/build/reports/kover/report.xml

    - name: Upload JaCoCo Instrumented XML Report
      uses: actions/upload-artifact@v4
      with:
        name: instrumented-report
        path: coverage-report/instrumented-report.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: app/build/reports/kover/report.xml
        flags: android_unit
        fail_ci_if_error: true

    - name: Upload Instrumented Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage-report/instrumented-report.xml
        flags: android_instrumented
        fail_ci_if_error: true

  deliveryQA:
    needs: test

    permissions:
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
    - name: Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug

    - name: Install Firebase CLI
      run: |
        curl -sL https://firebase.tools | bash

    - name: Distribute to Firebase Testers
      run: |
        firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
          --app ${{ secrets.FIREBASE_APP_ID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --groups "qa-team"

  deliveryPlay:
    needs: test

    permissions:
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Decode Play Store service account key
      run: |
        mkdir -p fastlane/keys
        echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_B64 }}" | base64 -d > fastlane/keys/play-store-service-account.json

    - name: Decode google-services.json
      run: echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 -d > app/google-services.json

    - name: Decode keystore
      run: echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

    - name: Generate local.properties for signing
      run: |
        echo "KEYSTORE_FILE=keystore.jks" >> local.properties
        echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> local.properties
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> local.properties
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> local.properties

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build AAB
      run: ./gradlew bundleRelease

    - name: Install Ruby + Fastlane
      run: |
        sudo gem install fastlane

    - name: Upload to Google Play with Fastlane
      run: fastlane internal
